// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------- //
// pio_capture_0 //
// ------------- //

#define pio_capture_0_wrap_target 0
#define pio_capture_0_wrap 16
#define pio_capture_0_pio_version 0

#define pio_capture_0_offset_delay 0u

static const uint16_t pio_capture_0_program_instructions[] = {
            //     .wrap_target
    0xa042, //  0: nop
    0x4008, //  1: in     pins, 8
    0x8020, //  2: push   block
    0xa842, //  3: nop                           [8]
    0x00c1, //  4: jmp    pin, 1
    0x4008, //  5: in     pins, 8
    0x8020, //  6: push   block
    0x00c0, //  7: jmp    pin, 0
    0x00c0, //  8: jmp    pin, 0
    0x00c0, //  9: jmp    pin, 0
    0x00c0, // 10: jmp    pin, 0
    0x00c0, // 11: jmp    pin, 0
    0x00c0, // 12: jmp    pin, 0
    0x00c0, // 13: jmp    pin, 0
    0x00c0, // 14: jmp    pin, 0
    0x00c0, // 15: jmp    pin, 0
    0x0005, // 16: jmp    5
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_capture_0_program = {
    .instructions = pio_capture_0_program_instructions,
    .length = 17,
    .origin = -1,
    .pio_version = pio_capture_0_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config pio_capture_0_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_capture_0_wrap_target, offset + pio_capture_0_wrap);
    return c;
}
#endif

// ------------- //
// pio_capture_1 //
// ------------- //

#define pio_capture_1_wrap_target 0
#define pio_capture_1_wrap 15
#define pio_capture_1_pio_version 0

#define pio_capture_1_offset_delay 0u
#define pio_capture_1_offset_divider1 1u
#define pio_capture_1_offset_divider2 8u

static const uint16_t pio_capture_1_program_instructions[] = {
            //     .wrap_target
    0xa042, //  0: nop
    0xe020, //  1: set    x, 0
    0x2006, //  2: wait   0 gpio, 6
    0x4008, //  3: in     pins, 8
    0x2086, //  4: wait   1 gpio, 6
    0x0042, //  5: jmp    x--, 2
    0x8020, //  6: push   block
    0x00c1, //  7: jmp    pin, 1
    0xe020, //  8: set    x, 0
    0x2006, //  9: wait   0 gpio, 6
    0x00c0, // 10: jmp    pin, 0
    0x4008, // 11: in     pins, 8
    0x2086, // 12: wait   1 gpio, 6
    0x0049, // 13: jmp    x--, 9
    0x8020, // 14: push   block
    0x0008, // 15: jmp    8
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_capture_1_program = {
    .instructions = pio_capture_1_program_instructions,
    .length = 16,
    .origin = -1,
    .pio_version = pio_capture_1_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x1
#endif
};

static inline pio_sm_config pio_capture_1_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_capture_1_wrap_target, offset + pio_capture_1_wrap);
    return c;
}
#endif

// ------- //
// pio_vga //
// ------- //

#define pio_vga_wrap_target 0
#define pio_vga_wrap 0
#define pio_vga_pio_version 0

static const uint16_t pio_vga_program_instructions[] = {
            //     .wrap_target
    0x6008, //  0: out    pins, 8
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_vga_program = {
    .instructions = pio_vga_program_instructions,
    .length = 1,
    .origin = -1,
    .pio_version = pio_vga_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config pio_vga_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_vga_wrap_target, offset + pio_vga_wrap);
    return c;
}
#endif

// ------- //
// pio_dvi //
// ------- //

#define pio_dvi_wrap_target 0
#define pio_dvi_wrap 9
#define pio_dvi_pio_version 0

static const uint16_t pio_dvi_program_instructions[] = {
            //     .wrap_target
    0x7006, //  0: out    pins, 6         side 2
    0x7006, //  1: out    pins, 6         side 2
    0x7006, //  2: out    pins, 6         side 2
    0x7006, //  3: out    pins, 6         side 2
    0x7006, //  4: out    pins, 6         side 2
    0x6806, //  5: out    pins, 6         side 1
    0x6806, //  6: out    pins, 6         side 1
    0x6806, //  7: out    pins, 6         side 1
    0x6806, //  8: out    pins, 6         side 1
    0x6806, //  9: out    pins, 6         side 1
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_dvi_program = {
    .instructions = pio_dvi_program_instructions,
    .length = 10,
    .origin = -1,
    .pio_version = pio_dvi_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config pio_dvi_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_dvi_wrap_target, offset + pio_dvi_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}
#endif

